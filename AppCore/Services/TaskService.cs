namespace AppCore.Services
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AppCore.DTOs;
    using AppCore.Enums;
    using AppCore.Interfaces;

    /// <summary>
    ///     TODO Bussiness Rules
    /// </summary>
    public class TaskService : ITaskService
    {
        private readonly ITaskItemRepo _repository;
        public TaskService( ITaskItemRepo repository ) => _repository = repository;

        /// <summary>
        ///     Create a new task
        /// </summary>
        /// <param name="itemDto">Task DTO without id, because the id will be autogenerated</param>
        /// <returns>Updated task DTO with new id value</returns>
        public async Task< TaskItemDto > CreateTaskAsync
            ( TaskItemDto itemDto ) => await _repository.CreateTaskAsync( itemDto );

        /// <summary>
        ///     Get a list of task with have the provided Status
        /// </summary>
        /// <param name="status">Status of the Tasks you want a list of</param>
        /// <returns>List of Task with have the required status</returns>
        public async Task< List< TaskItemDto > > GetAllTaskByStatusAsync
            ( Status status ) => await _repository.GetAllTaskByStatusAsync( status );

        /// <summary>
        ///     Returns a Task from by its Id
        /// </summary>
        /// <param name="id">id of Task to return</param>
        /// <returns>Returns a Task DTO</returns>
        public async Task< TaskItemDto > GetTaskByIdAsync( int id ) => await _repository.GetTaskByIdAsync( id );

        /// <summary>
        ///     Remove a Task
        /// </summary>
        /// <param name="id">Task id to remove</param>
        /// <returns>A bool stating if the record was deleted sucesfully</returns>
        public async Task< bool > RemoveTaskAsync( int id ) => await _repository.RemoveTaskAsync( id );

        /// <summary>
        ///     Updates a Task
        /// </summary>
        /// <param name="itemDto">Updated Task DTO</param>
        /// <returns>A bool stating if the record was updated sucesfully</returns>
        public Task< bool > UpdateTaskAsync( TaskItemDto itemDto ) => _repository.UpdateTaskAsync( itemDto );
    }
}