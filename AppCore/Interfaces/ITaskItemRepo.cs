namespace AppCore.Interfaces
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AppCore.DTOs;
    using AppCore.Enums;

    public interface ITaskItemRepo
    {
        /// <summary>
        ///     Returns a concrete Task from the database
        /// </summary>
        /// <param name="id">id of Task to return</param>
        /// <returns>Returns a Task DTO</returns>
        Task< TaskItemDto > GetTaskByIdAsync( int id );

        /// <summary>
        ///     Updates an item in the database
        /// </summary>
        /// <param name="itemDto">Updated item DTO to be saved</param>
        /// <returns>Number of updated records. 1 means it was sucessfull, 0 means nothing got updated</returns>
        Task< int > UpdateTaskAsync( TaskItemDto itemDto );

        /// <summary>
        ///     Create a new task in the database
        /// </summary>
        /// <param name="itemDto">item DTO without id, because the id will be autogenerated</param>
        /// <returns>Updated task DTO with new id value</returns>
        Task< TaskItemDto > CreateTaskAsync( TaskItemDto itemDto );

        /// <summary>
        ///     Remove a Task from the database
        /// </summary>
        /// <param name="itemDto">Item DTO with id</param>
        /// <returns>Number of deleted records. 1 means it was deleted sucessfully. 0 means nothing got deleted.</returns>
        Task< int > RemoveTaskAsync( TaskItemDto itemDto );

        /// <summary>
        ///     Get a list of task with have a concrete Status
        /// </summary>
        /// <param name="status">Status of the task you want a list of</param>
        /// <returns>List of Task with the required status</returns>
        Task< List< TaskItemDto > > GetAllTaskByStatusAsync( Status status );
    }
}